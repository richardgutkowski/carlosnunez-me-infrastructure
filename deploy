#!/usr/bin/env bash

usage() {
  printf "deploy.sh [target_environment]\n"
  printf "Deploys infrastructure for carlosnunez.me\n\n"
  printf "  target_environment: The environment to deploy onto."
}

is_env_supported() {
  env_to_check="$1"
  supported_envs="$2"
  matching_envs_found=$(echo "$supported_envs" | grep "${env_to_check}")
  if [ "$matching_envs_found" != "" ]
  then
    return 0
  else
    return 1
  fi
}

NUMBER_OF_ARGS_EXPECTED=1
if [ "$#" != "$NUMBER_OF_ARGS_EXPECTED" ]
then
  usage
  exit 1
fi

# We'll either start our CI environment if this is running from our local
# machine or start the actual deployment if this is running from within a
# docker container.
if [ ! -f .dockerenv ]
then
  SUPPORTED_ENVIRONMENTS=$(find config -type f -name "infrastructure_config*" \
    -exec sh -c "echo {} | cut -f2 -d '.'" \;)
  target_env=$1
  if ! is_env_supported $target_env $SUPPORTED_ENVIRONMENTS
  then
    printf "ERROR: '${target_env}' not found in '${SUPPORTED_ENVIRONMENTS}'\n"
    exit 1
  fi

  export TARGET_ENVIRONMENT=$target_env
  echo "Booting local Jenkins CI. Target environment: $TARGET_ENVIRONMENT"
  [ "$(docker-compose ps -q | wc -l)" != "0" ] && docker-compose down
  docker-compose up --abort-on-container-exit 2>&1 | \
    egrep --line-buffered "(pipeline\-runner|Jenkins is fully up and running)"
else
  if [ -f .dockerenv \
    -a "$JENKINS_JOB_NAME" != "" \
    -a "$JENKINS_MASTER_HOSTNAME" != "" \
    -a "$JENKINS_USERNAME" != "" \
    -a "$JENKINS_PASSWORD" != "" \
    -a "$TARGET_ENVIRONMENT" != "" ]
  then
    echo "Doing the deployment!"
    WAIT_PERIOD=5s
    JOB_IS_BUILDING=false
    SHOW_FIRST_TIME_MESSAGE_DURING_JOB_BUILD=true
    retries=0
    start_build_url="http://$JENKINS_USERNAME:$JENKINS_PASSWORD@$JENKINS_MASTER_HOSTNAME:8080/\
job/$JENKINS_JOB_NAME/build"
    while [ $retries -lt 10 ]
    do
      # Assume that the last response code is 201 if the job is currently building.
      # This will prevent us from invoking the job repeatedly unnecessarily.
      if [ "$JOB_IS_BUILDING" != "true" ]
      then
        response_code=$(curl -X POST -Iso /dev/null -w "%{http_code}" $start_build_url)
      else
        response_code="201"
      fi

      if [ "$?" != "0" -o "$response_code" != "201" ]
      then
        retries=$((retries+1))
        if [ "$response_code" == "000" ]
        then
          if [ "$(nc -z $JENKINS_MASTER_HOSTNAME 8080 -w 1; echo $?)" != "0" ]
          then
            echo "Jenkins isn't available yet. Retrying in $WAIT_PERIOD"
          else
            echo "Something went wrong with cURL. Retrying in $WAIT_PERIOD"
          fi
        else
          echo "Expected HTTP 200, got HTTP $response_code. Retrying in $WAIT_PERIOD"
        fi
        echo "URL we tried to hit: $start_build_url"
        sleep $WAIT_PERIOD
      else
        if [ "$JOB_IS_BUILDING" != "true" ]
        then
          retries=0
          echo "Waiting $WAIT_PERIOD seconds for the job to initialize and run..."
          sleep $WAIT_PERIOD
        fi
        last_build_url="http://$JENKINS_USERNAME:$JENKINS_PASSWORD@$JENKINS_MASTER_HOSTNAME:8080/\
job/$JENKINS_JOB_NAME/lastBuild"
        last_build_url_localhost_relative="http://localhost/job/$JENKINS_JOB_NAME/lastBuild"
        last_build_stats_url="${last_build_url}/api/json?tree=building,result"
        last_build_console_text_url="${last_build_url}/consoleText"
        last_build_console_text_url_localhost_relative=\
          "${last_build_url_localhost_relative}/consoleText"

        # This is a bit crude in that it always assumes that this job hasn't been queued
        # up before (lastBuild will always return information about the last build that
        # occurred). While this isn't a problem for our local CI given that our
        # containers don't keep state at the moment, this will need to be modified
        # for those that decide to use this script as-is in their existing Jenkins
        # server or for those that would like to bind-mount a JENKINS_HOME.
        last_build_response_code=$(curl -LIso /dev/null -w '%{http_code}' $last_build_url)
        if [ "$last_build_response_code" != "200" ]
        then
            JOB_IS_BUILDING=true
            echo "[$last_build_response_code] This job is waiting to be queued. See results at: $last_build_console_text_url"
            echo "Polling again in $WAIT_PERIOD"
            sleep $WAIT_PERIOD
        else
          retries=0
          last_build_status=$(curl -s $last_build_stats_url)
          last_build_console_text="$(curl -s $last_build_console_text_url)"

          if [ "$(echo $last_build_status | grep '"building":true')" != "" ]
          then
            retries=$((retries+1))
            JOB_IS_BUILDING=true
            if [ "$SHOW_FIRST_TIME_MESSAGE_DURING_JOB_BUILD" == "true" ]
            then
              echo "This job is building. See results in realtime at: $last_build_console_text_url_localhost_relative"
              echo "Retrying in $WAIT_PERIOD"
              SHOW_FIRST_TIME_MESSAGE_DURING_JOB_BUILD=false
            fi
            sleep $WAIT_PERIOD
          elif [ "$(echo $last_build_status | grep '"result":"FAILURE"')" != "" ]
          then
            echo "Deployment failed. See below for error text."
            echo "$last_build_console_text"
            exit 1
          else
            echo "$last_build_console_text"
            echo "Deployment succeeded!"
            exit 0
          fi
        fi
      fi
    done
    echo "Deployment failed. Timed out waiting on the deployment job to start."
    exit 1
  else
    echo "ERROR: A required environment variable is missing. Ensure that it \
is defined in docker-compose.yml. Here's what I have:\t \
JENKINS_MASTER_HOSTNAME=$JENKINS_MASTER_HOSTNAME\t \
JENKINS_JOB_NAME=$JENKINS_JOB_NAME\t \
JENKINS_USERNAME=$JENKINS_USERNAME\t \
JENKINS_PASSWORD=$JENKINS_PASSWORD\t \
TARGET_ENVIRONMENT=$TARGET_ENVIRONMENT"
    exit 1
fi
fi
